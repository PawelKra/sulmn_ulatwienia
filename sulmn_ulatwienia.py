# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SULMN
                                 A QGIS plugin
 Ułatwienia do pracy ze standardem SULMN
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-10-01
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Paweł Krąpiec
        email                : pkrapiec@protnmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from qgis.gui import QgsMapToolEmitPoint
from .skrypty import baza_wybierz, opisy, opisy_wskaz, ewid, ewid_wskaz, \
    funkcje
import os.path


class SULMN:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SULMN_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&sULMN ułatwienia')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.toolbar = self.iface.addToolBar('sulmn - ulatwienia')
        self.toolbar.setObjectName('sulmn-ulatwienia')
        self.akcje_toolbara = []

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SULMN', message)

    def add_action(self,
                   icon_path,
                   text,
                   callback,
                   enabled_flag=True,
                   add_to_menu=True,
                   add_to_toolbar=True,
                   status_tip=None,
                   whats_this=None,
                   parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        # icon_path = ':/plugins/sulmn_ulatwienia/icon.png'
        # self.add_action(
            # icon_path,
            # text=self.tr(u'SUPUL'),
            # callback=self.run,
            # parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

        # ikony -----------------------------
        ico_db = QIcon(os.path.join(self.plugin_dir, 'ico', 'db.png'))
        ico_tabela = QIcon(os.path.join(self.plugin_dir, 'ico', 'tabela.png'))
        ico_tabela_wsk = QIcon(os.path.join(self.plugin_dir, 'ico',
                                            'tabelaw.png'))
        ico_tabela_e = QIcon(os.path.join(
            self.plugin_dir, 'ico', 'tabela_e.png'))
        ico_tabela_wsk_e = QIcon(os.path.join(self.plugin_dir, 'ico',
                                              'tabelaw_e.png'))
        ico_pow_graf = QIcon(os.path.join(self.plugin_dir, 'ico',
                                          'pow_graf.png'))
        ico_wezly = QIcon(os.path.join(self.plugin_dir, 'ico', 'wezelki.png'))
        # --------------------

        # akcje ----------------------------
        self.a_wsk_db = QAction(
            ico_db, u"Wskaż baze TPU", self.iface.mainWindow())
        self.a_wsk_db.triggered.connect(self.wskaz_baze)

        self.a_opisy = QAction(
            ico_tabela, 'Pokaż opisy z TPU', self.iface.mainWindow())
        self.a_opisy.triggered.connect(self.pokaz_opisy)

        self.a_klik_wydz = QAction(
            ico_tabela_wsk, 'Pokaż opis wybranego wydzielenia',
            self.iface.mainWindow())
        self.a_klik_wydz.triggered.connect(self.klik_wydz)

        self.a_ewid = QAction(
            ico_tabela_e, 'Pokaż ewidencję z TPU', self.iface.mainWindow())
        self.a_ewid.triggered.connect(self.pokaz_dzewid)

        self.a_klik_ewid = QAction(
            ico_tabela_wsk_e, 'Pokaż opis wybranej dz. ewid.',
            self.iface.mainWindow())
        self.a_klik_ewid.triggered.connect(self.klik_ewid)

        self.a_pow_graf = QAction(
            ico_pow_graf, 'Oblicz pow graf.',
            self.iface.mainWindow())
        self.a_pow_graf.triggered.connect(self.oblicz_pow_graf)

        self.a_pok_wezelki = QAction(
            ico_wezly, 'Pokaż węzełki', self.iface.mainWindow())
        self.a_pok_wezelki.triggered.connect(self.pokaz_wezelki)

        # akcje toolbara ----------------------------
        self.toolbar.addAction(self.a_wsk_db)
        self.toolbar.addSeparator()
        self.toolbar.addAction(self.a_opisy)
        self.toolbar.addAction(self.a_klik_wydz)
        self.toolbar.addAction(self.a_ewid)
        self.toolbar.addAction(self.a_klik_ewid)
        self.toolbar.addSeparator()
        self.toolbar.addAction(self.a_pok_wezelki)
        self.toolbar.addAction(self.a_pow_graf)

        self.akcje_toolbara.append(self.a_wsk_db)
        self.akcje_toolbara.append(self.a_opisy)
        self.akcje_toolbara.append(self.a_klik_wydz)
        self.akcje_toolbara.append(self.a_ewid)
        self.akcje_toolbara.append(self.a_klik_ewid)
        self.akcje_toolbara.append(self.a_pok_wezelki)
        self.akcje_toolbara.append(self.a_pow_graf)
        # --------------------

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for a in self.akcje_toolbara:
            self.iface.removeToolBarIcon(a)
        del self.toolbar
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&sULMN ułatwienia'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and
        # keep reference
        # Only create GUI ONCE in callback, so that it will only load when the
        # plugin is started

        # show the dialog
        # self.dlg.show()
        # Run the dialog event loop
        # result = self.dlg.exec_()
        # See if OK was pressed
        # if result:
        #     Do something useful here - delete the line containing pass and
        #     substitute with your code.
        pass

    def klik_wydz(self):
        self.ta = QgsMapToolEmitPoint(self.iface.mapCanvas())
        self.iface.mapCanvas().setMapTool(self.ta)
        self.ta.canvasClicked.connect(self.pokaz_opis_wydz)

    def klik_ewid(self):
        self.ta = QgsMapToolEmitPoint(self.iface.mapCanvas())
        self.iface.mapCanvas().setMapTool(self.ta)
        self.ta.canvasClicked.connect(self.pokaz_opis_ewid)

    def wskaz_baze(self):
        b = baza_wybierz.Wskaz(self.iface)
        b.pobierz()

    def pokaz_opisy(self):
        o = opisy.Opisy(self.iface)
        if o.podczytaj_baze():
            o.pokaz_okno()

    def pokaz_dzewid(self):
        o = ewid.Ewidencja(self.iface)
        if o.podczytaj_baze():
            o.pokaz_okno()

    def pokaz_opis_wydz(self, k):
        o = opisy_wskaz.OpisWskazany(self.iface)
        if o.sprawdz_podstawe():
            o.sprawdz_reszte(list(k))

    def pokaz_opis_ewid(self, k):
        e = ewid_wskaz.EwidWskazana(self.iface)
        if e.sprawdz_podstawe():
            e.sprawdz_reszte(list(k))

    def oblicz_pow_graf(self):
        funkcje.oblicz_pow_graf(self.iface)

    def pokaz_wezelki(self):
        funkcje.przelacz_wezly(self.iface)
